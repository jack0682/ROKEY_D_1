#!/usr/bin/env python3
import os
import sys
import math
import cv2
import numpy as np
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped
from cv_bridge import CvBridge
from ultralytics import YOLO

import tf2_ros
import tf2_geometry_msgs
from rclpy.duration import Duration

# ========================
# 상수 정의
# ========================
MODEL_PATH        = '/home/hyojae/rokey_ws/model/my_best.pt'
COLOR_TOPIC       = '/robot1/oakd/rgb/preview/image_raw'
DEPTH_TOPIC       = '/robot1/oakd/stereo/image_raw'
TARGET_CLASS_ID   = 0       # 예: car=0
NORMALIZE_DEPTH_M = 5.0     # 최대 시각화 깊이(m)

# ========================
# YOLO + Depth + TF 노드
# ========================
class YoloDepthTFNode(Node):
    def __init__(self):
        super().__init__('yolo_depth_tf_node')

        # YOLO 모델 로드
        if not os.path.exists(MODEL_PATH):
            self.get_logger().error(f"Model not found: {MODEL_PATH}")
            sys.exit(1)
        self.model = YOLO(MODEL_PATH)
        self.names = getattr(self.model, 'names', [])

        # TF2 버퍼 및 리스너
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        # CvBridge
        self.bridge = CvBridge()
        self.latest_depth = None

        # 이미지 구독
        self.create_subscription(Image, COLOR_TOPIC, self.color_callback, 10)
        self.create_subscription(Image, DEPTH_TOPIC, self.depth_callback, 10)

        cv2.namedWindow("YOLO+Depth", cv2.WINDOW_AUTOSIZE)

    def depth_callback(self, msg: Image):
        # 깊이 이미지 → numpy 배열 (mm 단위)
        depth = self.bridge.imgmsg_to_cv2(msg, desired_encoding='passthrough')
        if depth.dtype == np.float32:
            depth = np.nan_to_num(depth, nan=0.0) * 1000.0
        self.latest_depth = depth.astype(np.uint16)

    def color_callback(self, msg: Image):
        if self.latest_depth is None:
            self.get_logger().warn("Waiting for first depth frame...")
            return

        img = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        results = self.model(img, stream=True)

        for r in results:
            for box in r.boxes:
                cls = int(box.cls[0])
                if cls != TARGET_CLASS_ID:
                    continue

                x1, y1, x2, y2 = map(int, box.xyxy[0])
                cx, cy = (x1 + x2)//2, (y1 + y2)//2

                # 깊이값 얻기 (mm → m)
                depth_mm = int(self.latest_depth[cy, cx])
                depth_m = depth_mm / 1000.0
                if depth_m == 0.0:
                    continue

                # 픽셀 기준 거리 보정
                dx_pixel = cx - img.shape[1] // 2  # 중심으로부터 거리
                cm_per_pixel = 0.1 * depth_m + 0.002
                real_width_cm = dx_pixel * cm_per_pixel
                real_width_m = real_width_cm / 100.0

                # TF 변환 시도
                point_in_map = self.transform_to_map(depth_m, real_width_m)
                if point_in_map:
                    px, py = point_in_map.point.x, point_in_map.point.y
                    cv2.putText(img, f"Map X: {px:.2f}, Y: {py:.2f}", (x1, y2 + 45),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 200, 255), 2)

                # 시각화
                cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)
                label = self.names[cls] if cls < len(self.names) else f"class_{cls}"
                cv2.putText(img, f"{label} {box.conf[0]:.2f}", (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 0, 0), 2)
                cv2.circle(img, (cx, cy), 4, (0, 255, 0), -1)
                cv2.putText(img, f"{depth_m:.2f}m", (cx + 5, cy - 5),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(img, f"Width: {real_width_cm:.1f}cm", (x1, y2 + 25),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

        # 이미지 출력
        cv2.imshow("YOLO+Depth", cv2.resize(img, (img.shape[1]*2, img.shape[0]*2)))
        if cv2.waitKey(1) & 0xFF == ord('q'):
            rclpy.shutdown()

    def transform_to_map(self, x_m, y_m):
        # base_link 기준 좌표 생성
        point_base = PointStamped()
        point_base.header.stamp = self.get_clock().now().to_msg()
        point_base.header.frame_id = 'base_link'
        point_base.point.x = x_m
        point_base.point.y = y_m
        point_base.point.z = 0.0

        try:
            # base_link → map 변환
            point_map = self.tf_buffer.transform(
                point_base,
                'map',
                timeout=Duration(seconds=0.5)
            )
            self.get_logger().info(f"[base_link] ({x_m:.2f}, {y_m:.2f}) → [map] ({point_map.point.x:.2f}, {point_map.point.y:.2f})")
            return point_map
        except Exception as e:
            self.get_logger().warn(f"TF transform failed: {e}")
            return None

def main():
    rclpy.init()
    node = YoloDepthTFNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()
        cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
